{
  "README.html": {
    "href": "README.html",
    "title": "netcore-desktop | netcore-desktop",
    "keywords": "netcore-desktop .NET core desktop API Documentation Changelog Examples 0003 ( GridSplitterManager ) How this project was built Documentation (github pages) Build and view locally Build and commit into docs branch Examples List of examples. 0003 ( GridSplitterManager ) How this project was built mkdir netcore-desktop cd netcore-desktop dotnet new sln mkdir src examples cd src dotnet new classlib -n netcore-desktop mv netcore-desktop desktop cd desktop dotnet add package netcore-ext dotnet add package Avalonia.Desktop cd ../.. cd examples dotnet new avalonia.mvvm -n example mv example/example.csproj example/example-0001.csproj mv example example-0001 cd .. dotnet sln add src/desktop examples/example-0001 dotnet build # documentation css mkdir data git submodule add https://github.com/jothepro/doxygen-awesome-css.git data/doxygen-awesome-css cd data/doxygen-awesome-css # doxygen 1.9.7 git checkout 245c7c94c20eac22730ef89035967f78b77bf405 cd ../.. Documentation (github pages) Configured through Settings/Pages on Branch docs ( path /docs ). while master branch exclude \"docs\" with .gitignore the docs branch doesn't Build and view locally ./doc build ./doc serve ./doc view Build and commit into docs branch ./doc commit"
  },
  "api/SearchAThing.Desktop.Constants.html": {
    "href": "api/SearchAThing.Desktop.Constants.html",
    "title": "Class Constants | netcore-desktop",
    "keywords": "Class Constants Namespace SearchAThing.Desktop Assembly netcore-desktop.dll public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DEFAULT_GridSplitterManager_DistributeSplitSize public const bool DEFAULT_GridSplitterManager_DistributeSplitSize = true Field Value bool DEFAULT_GridSplitterManager_FocusedControlBorderBrush public static readonly IBrush DEFAULT_GridSplitterManager_FocusedControlBorderBrush Field Value IBrush DEFAULT_GridSplitterManager_FocusedControlBorderThickness public const double DEFAULT_GridSplitterManager_FocusedControlBorderThickness = 1 Field Value double DEFAULT_GridSplitterManager_SplitterBrush public static readonly IBrush DEFAULT_GridSplitterManager_SplitterBrush Field Value IBrush DEFAULT_GridSplitterManager_SplitterThickness public const double DEFAULT_GridSplitterManager_SplitterThickness = 10 Field Value double DEFAULT_ScrollableSlider_Color public static readonly IBrush DEFAULT_ScrollableSlider_Color Field Value IBrush DEFAULT_ScrollableSlider_ResizeHandleWidth public const double DEFAULT_ScrollableSlider_ResizeHandleWidth = 10 Field Value double DEFAULT_ScrollableSlider_TextAlignment public const TextAlignment DEFAULT_ScrollableSlider_TextAlignment = Right Field Value TextAlignment"
  },
  "api/SearchAThing.Desktop.Ext.html": {
    "href": "api/SearchAThing.Desktop.Ext.html",
    "title": "Class Ext | netcore-desktop",
    "keywords": "Class Ext Namespace SearchAThing.Desktop Assembly netcore-desktop.dll public static class Ext Inheritance object Ext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SearchParent<T>(StyledElement, int?) Search from this control upward in the hierarchy searching given template type for all levels until root if default maxLevel (null) or for at most maxLevel of parents. public static T? SearchParent<T>(this StyledElement ctl, int? maxLevel = null) where T : Control Parameters ctl StyledElement maxLevel int? Returns T Type Parameters T"
  },
  "api/SearchAThing.Desktop.GridAutoRow.html": {
    "href": "api/SearchAThing.Desktop.GridAutoRow.html",
    "title": "Class GridAutoRow | netcore-desktop",
    "keywords": "Class GridAutoRow Namespace SearchAThing.Desktop Assembly netcore-desktop.dll Auto attach Grid.Row property to rows and expands RowDefinitions accordingly. public class GridAutoRow : AvaloniaObject, INotifyPropertyChanged Inheritance object AvaloniaObject GridAutoRow Implements INotifyPropertyChanged Inherited Members AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) AvaloniaObject.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AutoRowDefinitionsProperty public static readonly AttachedProperty<bool> AutoRowDefinitionsProperty Field Value AttachedProperty<bool> RefProperty public static readonly AttachedProperty<string?> RefProperty Field Value AttachedProperty<string> SetupDoneProperty public static readonly AttachedProperty<bool> SetupDoneProperty Field Value AttachedProperty<bool> Methods GetAutoRowDefinitions(AvaloniaObject) public static bool GetAutoRowDefinitions(AvaloniaObject element) Parameters element AvaloniaObject Returns bool GetRef(AvaloniaObject) public static string? GetRef(AvaloniaObject element) Parameters element AvaloniaObject Returns string GetSetupDone(AvaloniaObject) public static bool GetSetupDone(AvaloniaObject element) Parameters element AvaloniaObject Returns bool SetAutoRowDefinitions(AvaloniaObject, bool) public static void SetAutoRowDefinitions(AvaloniaObject element, bool parameter) Parameters element AvaloniaObject parameter bool SetRef(AvaloniaObject, string?) public static void SetRef(AvaloniaObject element, string? parameter) Parameters element AvaloniaObject parameter string SetSetupDone(AvaloniaObject, bool) public static void SetSetupDone(AvaloniaObject element, bool parameter) Parameters element AvaloniaObject parameter bool"
  },
  "api/SearchAThing.Desktop.GridSplitDirection.html": {
    "href": "api/SearchAThing.Desktop.GridSplitDirection.html",
    "title": "Enum GridSplitDirection | netcore-desktop",
    "keywords": "Enum GridSplitDirection Namespace SearchAThing.Desktop Assembly netcore-desktop.dll splitting direction public enum GridSplitDirection Fields Horizontally = 0 horizontally splitting works on Columns Vertically = 1 vertically splitting works on Rows"
  },
  "api/SearchAThing.Desktop.GridSplitterManager-1.ConfigControlDelegate.html": {
    "href": "api/SearchAThing.Desktop.GridSplitterManager-1.ConfigControlDelegate.html",
    "title": "Delegate GridSplitterManager<T>.ConfigControlDelegate | netcore-desktop",
    "keywords": "Delegate GridSplitterManager<T>.ConfigControlDelegate Namespace SearchAThing.Desktop Assembly netcore-desktop.dll configure control delegate public delegate void GridSplitterManager<T>.ConfigControlDelegate(T ctl, int uid) Parameters ctl T control uid int control identifier ( generated in SaveStructure )"
  },
  "api/SearchAThing.Desktop.GridSplitterManager-1.ControlEventDelegate.html": {
    "href": "api/SearchAThing.Desktop.GridSplitterManager-1.ControlEventDelegate.html",
    "title": "Delegate GridSplitterManager<T>.ControlEventDelegate | netcore-desktop",
    "keywords": "Delegate GridSplitterManager<T>.ControlEventDelegate Namespace SearchAThing.Desktop Assembly netcore-desktop.dll public delegate void GridSplitterManager<T>.ControlEventDelegate(T control) Parameters control T"
  },
  "api/SearchAThing.Desktop.GridSplitterManager-1.html": {
    "href": "api/SearchAThing.Desktop.GridSplitterManager-1.html",
    "title": "Class GridSplitterManager<T> | netcore-desktop",
    "keywords": "Class GridSplitterManager<T> Namespace SearchAThing.Desktop Assembly netcore-desktop.dll Manage arrangement of control that allow split Vertically or Horizontally. public class GridSplitterManager<T> : Grid, INotifyPropertyChanged, IDataContextProvider, ILogical, IThemeVariantHost, IResourceHost, IResourceNode, IStyleHost, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, IInputElement, IDataTemplateHost, INamed, ISetterValue, IChildIndexProvider where T : Control, INotifyPropertyChanged Type Parameters T Manage arrangement of control that allow split Vertically or Horizontally. Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control Panel Grid GridSplitterManager<T> Implements INotifyPropertyChanged IDataContextProvider ILogical IThemeVariantHost IResourceHost IResourceNode IStyleHost ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable IInputElement IDataTemplateHost INamed ISetterValue IChildIndexProvider Inherited Members Grid.ShowGridLinesProperty Grid.ColumnProperty Grid.RowProperty Grid.ColumnSpanProperty Grid.RowSpanProperty Grid.IsSharedSizeScopeProperty Grid.SetColumn(Control, int) Grid.GetColumn(Control) Grid.SetRow(Control, int) Grid.GetRow(Control) Grid.SetColumnSpan(Control, int) Grid.GetColumnSpan(Control) Grid.SetRowSpan(Control, int) Grid.GetRowSpan(Control) Grid.SetIsSharedSizeScope(Control, bool) Grid.GetIsSharedSizeScope(Control) Grid.MeasureOverride(Size) Grid.ArrangeOverride(Size) Grid.ChildrenChanged(object, NotifyCollectionChangedEventArgs) Grid.ShowGridLines Grid.ColumnDefinitions Grid.RowDefinitions Panel.BackgroundProperty Panel.Render(DrawingContext) Panel.AffectsParentArrange<TPanel>(params AvaloniaProperty[]) Panel.AffectsParentMeasure<TPanel>(params AvaloniaProperty[]) Panel.Background Panel.IsItemsHost Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.GetTemplateFocusTarget() Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnCreateAutomationPeer() Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.ApplyTemplate() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.MeasureCore(Size) Layoutable.ArrangeCore(Rect) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.InvalidateMirrorTransform() Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.BypassFlowDirectionPolicies Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) StyledElement.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.StyleKeyOverride StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.SearchParent<T>(StyledElement, int?) Constructors GridSplitterManager() public GridSplitterManager() Properties Children List programmatically created controls public ObservableCollection<T> Children { get; } Property Value ObservableCollection<T> CreateControl CreateControl public Func<T>? CreateControl { get; set; } Property Value Func<T> DebugWriter set to a valid text writer (eg.Console.Out) to debug structure processing; if null no debug output public TextWriter? DebugWriter { get; set; } Property Value TextWriter DistributeSplitSize DistributeSplitSize if false split will half its size; if true (default) it creates a def star so balanced between N axial parallel controls public bool DistributeSplitSize { get; set; } Property Value bool FocusedControl FocusedControl public T? FocusedControl { get; set; } Property Value T FocusedControlBorderBrush FocusedControlBorderBrush public IBrush FocusedControlBorderBrush { get; set; } Property Value IBrush FocusedControlBorderThickness FocusedControlBorderThickness public double FocusedControlBorderThickness { get; set; } Property Value double JsonSettings Json settings for SaveStructure(ConfigControlDelegate?) and LoadStructure(GridSplitterManagerLayoutItem, ConfigControlDelegate?). public JsonSerializerSettings JsonSettings { get; } Property Value JsonSerializerSettings SplitterBrush SplitterBrush public IBrush SplitterBrush { get; set; } Property Value IBrush SplitterThickness SplitterThickness public double SplitterThickness { get; set; } Property Value double Methods Clear() remove all layout except the topmost control view public void Clear() LoadStructure(GridSplitterManagerLayoutItem, ConfigControlDelegate?) load split layout from object ( see SaveStructure ) public void LoadStructure(GridSplitterManagerLayoutItem layout, GridSplitterManager<T>.ConfigControlDelegate? reconfigureControl = null) Parameters layout GridSplitterManagerLayoutItem split layout object reconfigureControl GridSplitterManager<T>.ConfigControlDelegate optional configure control delegate See Also JsonSettings OnPropertyChanged(string?) invoke this method to forward propertchanged event notification. note: not needed to specify propertyName set by compiler service to called property. protected void OnPropertyChanged(string? propertyName = null) Parameters propertyName string Remove() removed currently focused control; does nothing if focused control is null public void Remove() SaveStructure(ConfigControlDelegate?) create a serializable object that hold split configuration public GridSplitterManagerLayoutItem SaveStructure(GridSplitterManager<T>.ConfigControlDelegate? emitControl = null) Parameters emitControl GridSplitterManager<T>.ConfigControlDelegate optionally an action to save apart control info Returns GridSplitterManagerLayoutItem See Also JsonSettings ScanGrid(ConfigControlDelegate?, Action<(GridSplitterManagerLayoutItem item, Control control)>?) public GridSplitterManagerLayoutItem ScanGrid(GridSplitterManager<T>.ConfigControlDelegate? emitControl = null, Action<(GridSplitterManagerLayoutItem item, Control control)>? controlVisited = null) Parameters emitControl GridSplitterManager<T>.ConfigControlDelegate controlVisited Action<(GridSplitterManagerLayoutItem item, Control control)> Returns GridSplitterManagerLayoutItem Split(GridSplitDirection) split focused control over given direction; does nothing if focused control is null public T? Split(GridSplitDirection dir) Parameters dir GridSplitDirection split direction Returns T Split(GridSplitDirection, params double[]) split in the direction given producing a set of given sizes children public T[]? Split(GridSplitDirection dir, params double[] sizes) Parameters dir GridSplitDirection direction split sizes double[] list star size for produced children Returns T[] Events ControlCreated event fired when a child control created by split public event GridSplitterManager<T>.ControlEventDelegate ControlCreated Event Type GridSplitterManager<T>.ControlEventDelegate ControlRemoved event fired when a child control removed by Remove() method public event GridSplitterManager<T>.ControlEventDelegate ControlRemoved Event Type GridSplitterManager<T>.ControlEventDelegate PropertyChanged public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/SearchAThing.Desktop.GridSplitterManagerLayoutItem.html": {
    "href": "api/SearchAThing.Desktop.GridSplitterManagerLayoutItem.html",
    "title": "Class GridSplitterManagerLayoutItem | netcore-desktop",
    "keywords": "Class GridSplitterManagerLayoutItem Namespace SearchAThing.Desktop Assembly netcore-desktop.dll data structure to hold split layout info public class GridSplitterManagerLayoutItem Inheritance object GridSplitterManagerLayoutItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Children List of chidren items ( they can be grid or leafs ). public List<GridSplitterManagerLayoutItem>? Children { get; set; } Property Value List<GridSplitterManagerLayoutItem> Debug Debug purpose field. [JsonIgnore] public string? Debug { get; set; } Property Value string Index Index of the child. public int Index { get; set; } Property Value int LeafUID If this item is a leaf the value specify the UID of the control emitted during save layout. public int? LeafUID { get; set; } Property Value int? Level Nesting level. [JsonIgnore] public int Level { get; set; } Property Value int Sizes If the item is a grid, this specify the list of star sizes for rows/cols depending of SplitDirection. public List<double>? Sizes { get; set; } Property Value List<double> SplitDirection The item is a grid that split in this direction with Sizes. public GridSplitDirection? SplitDirection { get; set; } Property Value GridSplitDirection? Methods SortChildren() public void SortChildren() ToString() public override string ToString() Returns string"
  },
  "api/SearchAThing.Desktop.SmartConverter.html": {
    "href": "api/SearchAThing.Desktop.SmartConverter.html",
    "title": "Class SmartConverter | netcore-desktop",
    "keywords": "Class SmartConverter Namespace SearchAThing.Desktop Assembly netcore-desktop.dll Smart Converter Parameter ( general form ): ?FN targetValueIfMatch targetValueIfNOTMatch valueToMatch targetValueIfMatch targetValueIfNOTMatch Functions: ?IsNull : true if given argument is null ?{gt,lt,gte,ltq,eq} v : true if given argument equals to parameter v ?{add,sub} v : add/sub v ?Lighter : double given argument brighness ?Lighter v : increase of given argument v=0-1 brighness ?Darker : half brighness ?Darker v : decrease to v=0-1 brightness ?Round dec : round value number to given decimals Supported target types: boolean double Thickness Brush FontWeight Examples ( converter parameter ): true Yellow Transparent ( valueType: boolean, targetType:IBrush ) converts to Yellow if value is true or transparent if value if false ?Darker 0.8 ( valueType: IBrush, targetType: IBrush ) converts to darker brush reducing at 80% its bridhtness ?IsNull 1.2 4.5 ( valueType: object, targetType: double ) converts to 1.2 if value is null, 4.5 otherwise true false true ( valueType: bool, targetType: bool ) converts to false if given value is true, viceversa otherwise public class SmartConverter : IValueConverter Inheritance object SmartConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance public static SmartConverter Instance { get; } Property Value SmartConverter Methods Convert(object?, Type, object, CultureInfo) Converts a value. public object? Convert(object? value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value to convert. targetType Type The type of the target. parameter object A user-defined parameter. culture CultureInfo The culture to use. Returns object The converted value. Remarks This method should not throw exceptions. If the value is not convertible, return a Avalonia.Data.BindingNotification in an error state. Any exceptions thrown will be treated as an application exception. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value to convert. targetType Type The type of the target. parameter object A user-defined parameter. culture CultureInfo The culture to use. Returns object The converted value. Remarks This method should not throw exceptions. If the value is not convertible, return a Avalonia.Data.BindingNotification in an error state. Any exceptions thrown will be treated as an application exception. operand(object?, Type, object, CultureInfo, bool) public object? operand(object? value, Type targetType, object parameter, CultureInfo culture, bool isBackCvt) Parameters value object targetType Type parameter object culture CultureInfo isBackCvt bool Returns object"
  },
  "api/SearchAThing.Desktop.html": {
    "href": "api/SearchAThing.Desktop.html",
    "title": "Namespace SearchAThing.Desktop | netcore-desktop",
    "keywords": "Namespace SearchAThing.Desktop Classes Constants Ext GridAutoRow Auto attach Grid.Row property to rows and expands RowDefinitions accordingly. GridSplitterManagerLayoutItem data structure to hold split layout info GridSplitterManager<T> Manage arrangement of control that allow split Vertically or Horizontally. SmartConverter Smart Converter Parameter ( general form ): ?FN targetValueIfMatch targetValueIfNOTMatch valueToMatch targetValueIfMatch targetValueIfNOTMatch Functions: ?IsNull : true if given argument is null ?{gt,lt,gte,ltq,eq} v : true if given argument equals to parameter v ?{add,sub} v : add/sub v ?Lighter : double given argument brighness ?Lighter v : increase of given argument v=0-1 brighness ?Darker : half brighness ?Darker v : decrease to v=0-1 brightness ?Round dec : round value number to given decimals Supported target types: boolean double Thickness Brush FontWeight Examples ( converter parameter ): true Yellow Transparent ( valueType: boolean, targetType:IBrush ) converts to Yellow if value is true or transparent if value if false ?Darker 0.8 ( valueType: IBrush, targetType: IBrush ) converts to darker brush reducing at 80% its bridhtness ?IsNull 1.2 4.5 ( valueType: object, targetType: double ) converts to 1.2 if value is null, 4.5 otherwise true false true ( valueType: bool, targetType: bool ) converts to false if given value is true, viceversa otherwise Enums GridSplitDirection splitting direction Delegates GridSplitterManager<T>.ConfigControlDelegate configure control delegate GridSplitterManager<T>.ControlEventDelegate"
  },
  "data/doxygen-awesome-css/README.html": {
    "href": "data/doxygen-awesome-css/README.html",
    "title": "Doxygen Awesome | netcore-desktop",
    "keywords": "Doxygen Awesome Doxygen Awesome is a custom CSS theme for Doxygen HTML-documentation with lots of customization parameters. Motivation I really like how the Doxygen HTML-documentation is structured! But IMHO it looks a bit outdated. This theme is an attempt to update the visuals of Doxygen without changing its overall layout too much. Features 🌈 Clean, modern design 🚀 Heavily customizable by adjusting CSS-variables 🧩 No changes to the HTML structure of Doxygen required 📱 Improved mobile usability 🌘 Dark mode support! 🥇 Works best with doxygen 1.9.1 - 1.9.4 and 1.9.6 Examples Some websites using this theme: Documentation of this repository wxWidgets OpenCV 5.x Zephyr FELTOR Spatial Audio Framework (SAF) libCloudSync libsl3 Installation To use the theme in your documentation, copy the required CSS and JS files from this repository into your project or add the repository as submodule and check out the latest release: git submodule add https://github.com/jothepro/doxygen-awesome-css.git cd doxygen-awesome-css git checkout v2.2.0 You can even install the theme system-wide by running make install. The files will be installed to /usr/local/share/ by default, but you can customize the install location with make PREFIX=/my/custom/path install. All theme files are located in the root of this repository and start with the prefix doxygen-awesome-. You may not need all of them. Follow the install instructions to figure out what files are required for your setup. Choosing a layout There is two layout options. Choose one of them and configure Doxygen accordingly: 1️⃣ Base Theme Comes with the typical Doxygen titlebar. Optionally the treeview in the sidebar can be enabled. Required files: doxygen-awesome.css Required Doxyfile configuration: GENERATE_TREEVIEW = YES # optional. Also works without treeview DISABLE_INDEX = NO FULL_SIDEBAR = NO HTML_EXTRA_STYLESHEET = doxygen-awesome-css/doxygen-awesome.css HTML_COLORSTYLE = LIGHT # required with Doxygen >= 1.9.5 2️⃣ Sidebar-Only Theme Hides the top titlebar to give more space to the content. The treeview must be enabled in order for this theme to work. Required files: doxygen-awesome.css, doxygen-awesome-sidebar-only.css Required Doxyfile configuration: GENERATE_TREEVIEW = YES # required! DISABLE_INDEX = NO FULL_SIDEBAR = NO HTML_EXTRA_STYLESHEET = doxygen-awesome-css/doxygen-awesome.css \\ doxygen-awesome-css/doxygen-awesome-sidebar-only.css HTML_COLORSTYLE = LIGHT # required with Doxygen >= 1.9.5 Caution: This theme is not compatible with the FULL_SIDEBAR = YES option provided by Doxygen! HTML_COLORSTYLE must be set to LIGHT since Doxygen 1.9.5! Further installation instructions: Installing extensions Customizing the theme (colors, spacing, border-radius, ...) Tips and Tricks for further configuration Browser support Tested with Chrome 110, Chrome 109 for Android, Chrome 110 for iOS Safari 16, Safari for iOS 16 Firefox 110, Firefox 110 for Android, Firefox 109 for iOS Edge 110 The theme does not strive to be backwards compatible to (significantly) older browser versions. Credits Thanks for all the bug reports and inspiring feedback on github! Special thanks to all the contributors: Read Next: Extensions"
  },
  "data/doxygen-awesome-css/docs/customization.html": {
    "href": "data/doxygen-awesome-css/docs/customization.html",
    "title": "Customization | netcore-desktop",
    "keywords": "Customization [TOC] CSS-Variables This theme is highly customizable because a lot of things are parameterized with CSS variables. Just to give you an idea on how flexible the styling is, click this button: Alter theme Setup It is recommended to add your own custom.css and overwrite the variables there: HTML_EXTRA_STYLESHEET = doxygen-awesome.css custom.css Make sure to override the variables in the correct spot. All variables should be customized where they have been defined, in the html tag selector: html { /* override light-mode variables here */ } For dark-mode overrides you have to choose where to put them, depending on whether the dark-mode toggle extension is installed or not: dark-mode toggle is installed html.dark-mode { /* define dark-mode variable overrides here if you DO use doxygen-awesome-darkmode-toggle.js */ } dark-mode toggle is NOT installed The dark-mode is enabled automatically depending on the system preference: @media (prefers-color-scheme: dark) { html:not(.light-mode) { /* define dark-mode variable overrides here if you DON'T use doxygen-awesome-darkmode-toggle.js */ } } Available variables The following list gives an overview of the variables defined in doxygen-awesome.css. The list is not complete. To explore all available variables, have a look at the CSS starting from here. All variables are defined at the beginning of the stylesheet. Parameter Default (Light) Default (Dark) Color Scheme: primary theme colors. This will affect the entire websites color scheme: links, arrows, labels, ... --primary-color #1779c4 #1982d2 --primary-dark-color #335c80 #5ca8e2 --primary-light-color #70b1e9 #4779ac Page Colors: background and foreground (text-color) of the documentation. --page-background-color #ffffff #1C1D1F --page-foreground-color #2f4153 #d2dbde --page-secondary-foreground-color #6f7e8e #859399 Spacing: default spacings. Most ui components reference these values for spacing, to provide uniform spacing on the page. --spacing-small 5px --spacing-medium 10px --spacing-large 16px Border Radius: border radius for all rounded ui components. Will affect many components, like dropdowns, memitems, codeblocks, ... --border-radius-small 4px --border-radius-medium 6px --border-radius-large 8px Content Width: The content is centered and constrained in its width. To make the content fill the whole page, set the following variable to auto. --content-maxwidth 1000px Code Fragment Colors: Color-Scheme of multiline codeblocks --fragment-background #F8F9FA #282c34 --fragment-foreground #37474F #dbe4eb Arrow Opacity: By default the arrows in the sidebar are only visible on hover. You can override this behavior so they are visible all the time. --side-nav-arrow-opacity 0 --side-nav-arrow-hover-opacity 0.9 ...and many more If you miss a configuration option or find a bug, please consider opening an issue! Doxygen generator The theme overrides most colors with the --primary-color-* variables. But there is a few small images and graphics that the theme cannot adjust or replace. To make these blend in better with the rest, it is recommended to adjust the doxygen color settings to something that matches the chosen color-scheme. For the default color-scheme, these values work out quite well: # Doxyfile HTML_COLORSTYLE_HUE = 209 HTML_COLORSTYLE_SAT = 255 HTML_COLORSTYLE_GAMMA = 113 Share your customizations If you customized the theme with custom colors, spacings, font-sizes, etc. and you want to share your creation with others, you can to this here. I am always curious to learn about how you made the theme look even better! Read Next: Tips & Tricks"
  },
  "data/doxygen-awesome-css/docs/extensions.html": {
    "href": "data/doxygen-awesome-css/docs/extensions.html",
    "title": "Extensions | netcore-desktop",
    "keywords": "Extensions [TOC] On top of the base theme provided by doxygen-awesome.css, this repository comes with Javascript extensions that require additional setup steps to get them running. The extensions require customizations in the header HTML-template. This is how you can create the default template with Doxygen: Create default header template: doxygen -w html header.html delete_me.html delete_me.css Reference the template in your Doxyfile: HTML_HEADER = header.html More details on header customization Dark Mode Toggle {#extension-dark-mode-toggle} Adds a button next to the search bar to enable and disable the dark theme variant manually: Installation Add the required resources in your Doxyfile: HTML_EXTRA_FILES: doxygen-awesome-darkmode-toggle.js HTML_EXTRA_STYLESHEET: doxygen-awesome-sidebar-only-darkmode-toggle.css (ONLY required for the sidebar-only theme variant!) In the header.html template, include doxygen-awesome-darkmode-toggle.js at the end of the <head> and then initialize it: <html> <head> <!-- ... other metadata & script includes ... --> <script type=\"text/javascript\" src=\"$relpath^doxygen-awesome-darkmode-toggle.js\"></script> <script type=\"text/javascript\"> DoxygenAwesomeDarkModeToggle.init() </script> </head> <body> Customizing Changing the tooltip of the button: DoxygenAwesomeDarkModeToggle.title = \"Zwischen hellem/dunklem Modus wechseln\" Changing Icons. Both Emoji or SVG icons are supported: DoxygenAwesomeDarkModeToggle.lightModeIcon = '🌞' // icon from https://fonts.google.com/icons DoxygenAwesomeDarkModeToggle.darkModeIcon = `<svg xmlns=\"http://www.w3.org/2000/svg\" enable-background=\"new 0 0 24 24\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#009793\"><g><rect fill=\"none\" height=\"24\" width=\"24\"/></g><g><g><path d=\"M8.1,14.15C9.77,14.63,11,16.17,11,18c0,0.68-0.19,1.31-0.48,1.87c0.48,0.09,0.97,0.14,1.48,0.14 c1.48,0,2.9-0.41,4.13-1.15c-2.62-0.92-5.23-2.82-6.8-5.86C7.74,9.94,7.78,7.09,8.29,4.9c-2.57,1.33-4.3,4.01-4.3,7.1c0,0,0,0,0,0 c0.01,0,0.01,0,0.02,0C5.66,12,7.18,12.83,8.1,14.15z\" opacity=\".3\"/><path d=\"M19.78,17.51c-2.47,0-6.57-1.33-8.68-5.43C8.77,7.57,10.6,3.6,11.63,2.01C6.27,2.2,1.98,6.59,1.98,12 c0,0.14,0.02,0.28,0.02,0.42C2.61,12.16,3.28,12,3.98,12c0,0,0,0,0,0c0-3.09,1.73-5.77,4.3-7.1C7.78,7.09,7.74,9.94,9.32,13 c1.57,3.04,4.18,4.95,6.8,5.86c-1.23,0.74-2.65,1.15-4.13,1.15c-0.5,0-1-0.05-1.48-0.14c-0.37,0.7-0.94,1.27-1.64,1.64 c0.98,0.32,2.03,0.5,3.11,0.5c3.5,0,6.58-1.8,8.37-4.52C20.18,17.5,19.98,17.51,19.78,17.51z\"/><path d=\"M7,16l-0.18,0C6.4,14.84,5.3,14,4,14c-1.66,0-3,1.34-3,3s1.34,3,3,3c0.62,0,2.49,0,3,0c1.1,0,2-0.9,2-2 C9,16.9,8.1,16,7,16z\"/></g></g></svg>` All customizations must be applied before calling DoxygenAwesomeDarkModeToggle.init()! Fragment Copy Button {#extension-copy-button} Shows a copy button when the user hovers over a code fragment: Installation Add the required resources in your Doxyfile: HTML_EXTRA_FILES: doxygen-awesome-fragment-copy-button.js In the header.html template, include doxygen-awesome-fragment-copy-button.js at the end of the <head> and then initialize it: <html> <head> <!-- ... other metadata & script includes ... --> <script type=\"text/javascript\" src=\"$relpath^doxygen-awesome-fragment-copy-button.js\"></script> <script type=\"text/javascript\"> DoxygenAwesomeFragmentCopyButton.init() </script> </head> <body> Customizing The tooltip of the button can be changed: DoxygenAwesomeFragmentCopyButton.title = \"In die Zwischenablage kopieren\" The icon can be changed. It must be an SVG: DoxygenAwesomeFragmentCopyButton.copyIcon = `<svg ...>` DoxygenAwesomeFragmentCopyButton.successIcon = `<svg ...>` All customizations must be applied before calling DoxygenAwesomeDarkModeToggle.init()! Paragraph Linking {#extension-para} Provides a button on hover behind every headline to allow easy creation of a permanent link to the headline: Works for all headlines and for many documentation section titles. Installation Add the required resources in your Doxyfile: HTML_EXTRA_FILES: doxygen-awesome-paragraph-link.js In the header.html template, include doxygen-awesome-paragraph-link.js at the end of the <head> and then initialize it: <html> <head> <!-- ... other metadata & script includes ... --> <script type=\"text/javascript\" src=\"$relpath^doxygen-awesome-paragraph-link.js\"></script> <script type=\"text/javascript\"> DoxygenAwesomeParagraphLink.init() </script> </head> <body> Customizing The button tooltip can be changed: DoxygenAwesomeParagraphLink.title = \"Abschnitt verknüpfen\" The icon of the button can be changed. Both plain characters or SVG icons are supported: DoxygenAwesomeParagraphLink.icon = \"¶\" All customizations must be applied before calling DoxygenAwesomeParagraphLink.init()! Interactive TOC {#extension-toc} On large screens the Table of Contents (TOC) is anchored on the top right of the page. This extension visualizes the reading progress by dynamically highlighting the currently active section. On small screens the extension hides the TOC by default. The user can open it manually when needed: Installation Add the required resources in your Doxyfile: HTML_EXTRA_FILES: doxygen-awesome-interactive-toc.js In the header.html template, include doxygen-awesome-interactive-toc.js at the end of the <head> and then initialize it: <html> <head> <!-- ... other metadata & script includes ... --> <script type=\"text/javascript\" src=\"$relpath^doxygen-awesome-interactive-toc.js\"></script> <script type=\"text/javascript\"> DoxygenAwesomeInteractiveToc.init() </script> </head> <body> Customizing The offset for when a headline is considered active can be changed. A smaller value means that the headline of the section must be closer to the top of the viewport before it is highlighted in the TOC: DoxygenAwesomeInteractiveToc.topOffset = 45 Hiding the TOC on small screens can be disabled. It is still interactive and can be hidden by the user but will now be open by default: DoxygenAwesomeInteractiveToc.hideMobileMenu = false Tabs {#extension-tabs} @note Experimental feature! Please report bugs here. This extension allows to arrange list content in tabs: Tab 1 This is the content of tab 1 Tab 2 This is the content of tab 2 Installation Add the required resources in your Doxyfile: HTML_EXTRA_FILES: doxygen-awesome-tabs.js In the header.html template, include doxygen-awesome-tabs.js at the end of the <head> and then initialize it: <html> <head> <!-- ... other metadata & script includes ... --> <script type=\"text/javascript\" src=\"$relpath^doxygen-awesome-tabs.js\"></script> <script type=\"text/javascript\"> DoxygenAwesomeTabs.init() </script> </head> <body> Usage Each list that is supposed to be displayed as tabs has to be wrapped with the tabbed CSS class. Each item in the list must start with an element that has the class tab-title. It will then be used as tab title. <div class=\"tabbed\"> - <b class=\"tab-title\">Tab 1</b> This is the content of tab 1 - <b class=\"tab-title\">Tab 2</b> This is the content of tab 2 </div> Read Next: Customization"
  },
  "data/doxygen-awesome-css/docs/tricks.html": {
    "href": "data/doxygen-awesome-css/docs/tricks.html",
    "title": "Tips & Tricks | netcore-desktop",
    "keywords": "Tips & Tricks [TOC] Diagrams with Graphviz {#tricks-graphviz} To get the best looking class diagrams for your documentation, generate them with Graphviz as vector graphics with transparent background: # Doxyfile HAVE_DOT = YES DOT_IMAGE_FORMAT = svg DOT_TRANSPARENT = YES In case INTERACTIVE_SVG = YES is set in the Doxyfile, all user-defined dotgraphs must be wrapped with the interactive_dotgraph CSS class in order for them to be rendered correctly: <div class=\"interactive_dotgraph\"> \\dotfile graph.dot </div> @note Both the default overflow scrolling behavior in this theme and the interactive editor enabled by INTERACTIVE_SVG are unsatisfying workarounds IMHO. Consider designing your graphs to be narrow enough to fit the page to avoid scrolling. Disable Dark Mode {#tricks-darkmode} If you don't want the theme to automatically switch to dark mode depending on the browser preference, you can disable dark mode by adding the light-mode class to the html-tag in the header template: <html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"light-mode\"> The same can be done to always enable dark-mode: <html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"dark-mode\"> @warning This only works if you don't use the dark-mode toggle extension. Choosing Sidebar Width {#tricks-sidebar} If you have enabled the sidebar-only theme variant, make sure to carefully choose a proper width for your sidebar. It should be wide enough to hold the icon, project title and version number. If the content is too wide, it will be cut off. html { /* Make sure sidebar is wide enough to contain the page title (logo + title + version) */ --side-nav-fixed-width: 335px; } The chosen width should also be set in the Doxyfile: # Doxyfile TREEVIEW_WIDTH = 335 Formatting Tables {#tricks-tables} By default tables in this theme are left-aligned and as wide as required to fit their content. Those properties can be changed for individual tables. Centering Tables can be centered by wrapping them in the <center> HTML-tag. Code <center> | This table | is centered | |------------|----------------------| | test 1 | test 2 | </center> Result | This table | is centered | |------------|----------------------| | test 1 | test 2 | Full Width To make tables span the full width of the page, no matter how wide the content is, wrap the table in the full_width_table CSS class. @warning Apply with caution! This breaks the overflow scrolling of the table. Content might be cut of on small screens! Code <div class=\"full_width_table\"> | This table | spans the full width | |------------|----------------------| | test 1 | test 2 | </div> Result | This table | spans the full width | |------------|----------------------| | test 1 | test 2 | Read Next: Example"
  },
  "data/pages/examples/examples.html": {
    "href": "data/pages/examples/examples.html",
    "title": "| netcore-desktop",
    "keywords": "\\page examples Examples Example Keywords Description file GridAutoRow desc file SmartConverter desc file GridSplitterManager desc"
  },
  "data/pages/main.html": {
    "href": "data/pages/main.html",
    "title": "| netcore-desktop",
    "keywords": "\\mainpage netcore-desktop Main page description. GitHub Modules: \\subpage examples"
  },
  "index.html": {
    "href": "index.html",
    "title": "netcore-desktop | netcore-desktop",
    "keywords": "netcore-desktop api"
  }
}